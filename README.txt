This is the main branch for our Care Bird Android Application


//==========================================================================================================================
5/18/2014
I will attempt to explain the plan for how the webservice will be implemented.

There will be a Database class, and for any one instance of the application there should be one instance of a Database Object.
The Database class will do the work of contacting the web-service, as well as caching data locally(Not currently implemented).

The General Interface of the Database class as of right now is as follows:

Other Notes:
Objects with a % are currently implemented on both the webserver and android studio
Objects with a + are currently implemented on the webserver
Objects with a # are currently implemented on android studio
Objects with a - are not currently implemented

Database {
% private  User user;
  
  /** logIn will accept a User object and will check the username and password with the webserver.
  * Upon a successful user/pass combination, the User object held by the Database class will be updated
  * with a SessionToken. No additional manipulation will be required by android developers.*/
  public DBResponse %logIn(User user);
  
  /** createAccount will accept a User object and will check for the existence of that user in the Database
  * Upon successful account creation, a new user will be added to the users table on the webservice.
  * The new user will automatically be logged in*/
  public DBResponse createAccount(User user);
  
  /** addCareGiver will accept a User object representing the care receiver, as well as a PermissionToken 
  * generated by the careReceivers phone. These will be sent to the webServer where they will live for a short time
  * waiting for a careGiver to come along and correctly guess the PermissionToken.*/
  + public DBResponse addCareGiver(User careReceiver, PermissionToken);
  
  /** addCareReceiver will accept a User object representing the care giver, as well as a PermissionToken 
  * generated by the careReceivers phone. These will be sent to the webServer where they will look for a matching
  * PermissionToken. When the Tokens match, the UserId's associated with that PermissionToken will be entered into
  * a relationship table on the database; making the relationship official.*/
  public DBResponse addCareReceiver(User careGiver, PermissionToken);
  
  /** This method accepts a ReminderSchedule object and 
  * assumes the reminder is intended for the currently logged in user */
  public DBResponse addReminderSchedule(ReminderSchedule reminder);
  
  /** This method accepts a ReminderSchedule object and
  * assumes the reminder is intended for the passed User object (a careReceiver)
  * When it speaks with the webserver it will also use the currently logged in user (a careGiver)
  * So that the webServer can check the Permissions*/
  public DBResponse addReminderSchedule(ReminderSchedule reminder, User user);
  
  /** This method will return an arraylist of ReminderSchedules associated with the currently logged in user */
  public ArrayList<ReminderSchedule> getReminderSchedules();
  
  /** This method will return an arraylist of ReminderSchedules associated with the passed User object
  * When it speaks with the webserver it will also use the currently logged in user (a careGiver)
  * So that the webServer can check the Permissions*/
  public ArrayList<ReminderSchedule> getReminderSchedules(User careGiver);
  
  /** This is the same concept as addReminderSchedule, only it will remove the ReminderSchedule */
  public DBResponse removeReminderSchedule(ReminderSchedule reminder);
  
  /** This is the same concept as addReminderSchedule, only it will remove the ReminderSchedule */
  public DBResponse removeReminderSchedule(ReminderSchedule reminder, User careReceiver);
  
  // The implementation for how to handle the different records has not yet been decided upon
}

// The Database class will use at least two objects.
/** The User class interface */
User{
  String UName;
  String FName;
  String LName;
  String Pass;
  String Token; // Provided by the webserver
}

/** DBResponse will hold information related to responses from the webserver, such as pass, fail, and other errors */
DBResponse{ //Details not yet defined }

//==========================================================================================================================
